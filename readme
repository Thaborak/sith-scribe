# SithScribe

Welcome to SithScribe a Star wars API note taking application! This application allows users to create, read, update, and delete notes, as well as search for and display data about Star Wars characters.

## Live Link

**https://sithscribe-a3dcb91553bf.herokuapp.com/**
![Alt text](screenshot.png)

## Features

- Create, read, update, and delete (CRUD) operations for notes
- Star Wars character lookup using the SWAPI (Star Wars API)
- Single-page application using React

## Design

Backend (Express.js and MongoDB):

For this challenge Express.js and MongoDB were choosen as the backend framework.
Integrated MongoDB using Mongoose to handle database operations.
Structured the project into organized folders (controllers, models, routes, services) to separate concerns and improve maintainability.
Implemented API endpoints for CRUD operations on notes and character search.
Created a db.js file to manage the database connection and configuration.
Used environment variables to securely store sensitive information.
Set up Mocha and Chai for integration testing using a separate test database with docker.
Configured Docker and Docker Compose to containerize the application and its dependencies.

Frontend (React):

React was choosen as the frontend library for building a single-page application.
Used styled-components for CSS styling with a Star Wars theme.
The overall design and css could use some more work but that was my least concern.
Designed somewhat reusable components such as the header, search bar, search results, and create note form.
Implemented state management using React hooks, including useState and useEffect.
Utilized Axios for making HTTP requests to the backend API.
Organized code into folders and components for better structure and maintainability.
Implemented responsive design to ensure a good user experience across different screen sizes.
Employed error handling and loading indicators to provide feedback to users during API requests.
Set up routing using react-router-dom and adapted for server-side rendering.

## Getting Started

To get started with the application, follow the steps below.

### Prerequisites

- Docker desktop (recommended)

or

- Node.js
- MongoDB

### Installation

#### 1. Clone this repository to your local machine.

#### 2. Navigate to the project directory & setup enviroment variables:

```sh
cd sith-scribe
cp .env.example .env
```

#### 3. Install Dependencies

Install the project's dependencies using npm or yarn:

```sh
   npm install
```

#### 4. Run the Application

```sh
 docker-compose up
```

or

start a mongo instance &

```sh
npm run start:dev
```

#### 5. Backend API

The backend API is accessible at http://localhost:3000/api. The frontend will interact with the backend to perform CRUD operations and retrieve Star Wars character data.

#### 6. Running Backend Integration Tests

To run the backend integration tests, make sure you have MongoDB running and the .env file properly configured. Then, run the following command:

```sh
npm test
```

#### 7. Explanation of Directory Structure

Directory Structure Overview:

- /client: Contains the frontend React application.
- /src: Contains backend server code.
- /src/controllers: Defines route handlers.
- /src/models: Defines MongoDB schema models.
- /src/routes: Defines API routes.
- /src/services: Contains utility functions to interact with the database and external APIs.
- /src/tests: Contains integration tests.
- /client/public: Public assets for the frontend.
- /client/src: React components, styles, and other frontend files.

#### Future Additions

- user login with Oauth and personal notes
- redesign with good component library (material UI) or custom
- extend search to other parts of the swapi ex: ships, locations, etc....
- link searchable data into notes
